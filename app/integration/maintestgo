package integration

import (
	"goapi/business/mid"
	"log"
	"os"
	"testing"

	"github.com/ory/dockertest"
	"github.com/ory/dockertest/docker"

	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq" // The database driver in use.
)

type TestRunner struct {
	Db *sqlx.DB
}

var db *sqlx.DB

func TestMain(m *testing.M) *sqlx.DB {

	if err := mid.LoadConfig("."); err != nil {
		log.Fatalf("Could configfile: %s", err)
	}
	dbConfig, _ := mid.GetDbConfig()
	log.Printf("config.json is loaded")

	// Create a new pool for Docker containers
	pool, err := dockertest.NewPool("") // pool is the place to run container
	if err != nil {
		log.Fatalf("Could not connect to Docker: %s", err)
	}

	resource, err := pool.RunWithOptions(&dockertest.RunOptions{
		Repository: "postgres",
		Tag:        "11",
		Env: []string{
			"POSTGRES_USER=" + dbConfig.User,         //"POSTGRES_USER=postgres",
			"POSTGRES_PASSWORD=" + dbConfig.Password, //"POSTGRES_PASSWORD=goapitestpass",
			"listen_addresses = '*'",
		},
		ExposedPorts: []string{"5432"}, // []string{"5432"},
		PortBindings: map[docker.Port][]docker.PortBinding{
			"5432": {
				{HostIP: "0.0.0.0", HostPort: dbConfig.Port}, // "5433"},
			},
		},
	}, func(config *docker.HostConfig) {
		// set AutoRemove to true so that stopped container goes away by itself
		config.AutoRemove = true
		config.RestartPolicy = docker.RestartPolicy{
			Name: "no",
		}
	})
	if err != nil {
		log.Fatalf("Could not run in Docker: %s", err)
	}

	log.Printf("Postgres (DB) is running on container:%s", resource.Container.Name)

	// Exponential retry to connect to database while it is booting
	if err := pool.Retry(func() error {
		db, err := open(dbConfig) //sqlx.Open("postgres", psqlInfo)
		if err != nil {
			log.Println("Database not ready yet (it is booting up, wait for a few tries)...")
			return err
		}

		log.Println("DB ping", db.Ping() == nil)
		// Tests if database is reachable
		return db.Ping()
	}); err != nil {
		log.Fatalf("Could not connect to Docker: %s", err)
	}

	code := m.Run()
	// Delete the docker container
	if err := pool.Purge(resource); err != nil {
		log.Fatalf("Could not purge resource: %s", err)
	}
	log.Printf("Container:%s is deleted.", resource.Container.Name)

	os.Exit(code)
}

//TODO : duplicated code
func open(dbConfig *mid.DbConfig) (*sqlx.DB, error) {

	return sqlx.Open("postgres", dbConfig.ConnectinString())
}
